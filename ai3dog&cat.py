# -*- coding: utf-8 -*-
"""AI3DOG&CAT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSoV6LenoqjEQJJ04tjdSPqfuZ1mmEoG
"""

import numpy as np
import cv2
import os
import random
import matplotlib.pyplot as plt
import pickle

DIRECTORY= r'/content/valid'
CATEGORIES=['cats','dogs']

IMG_SIZE=100

data=[]

for category in CATEGORIES:

  folder=os.path.join(DIRECTORY,category)
  label = CATEGORIES.index(category)


  for img in os.listdir(folder):
    img_path = os.path.join(folder, img)
    img_arr = cv2.imread(img_path)
    try:
      img_arr = cv2.resize(img_arr,(IMG_SIZE,IMG_SIZE))
      
    # plt.imshow(img_arr)
    # break
      data.append([img_arr,label])
    except:
      print("error")

len(data)

random.shuffle(data)

x=[]
y=[]

for features, labels in data:
  x.append(features)
  y.append(labels)

x= np.array(x)
y=np.array(y)

pickle.dump(x,open('x.pk1','wb'))
pickle.dump(y,open('y.pk1','wb'))

x=pickle.load(open('x.pk1','rb'))
y=pickle.load(open('y.pk1','rb'))

x=x/255

x.shape

from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Flatten,Dense

model = Sequential()

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D((2,2)))


model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D((2,2)))

model.add(Flatten())

model.add(Dense(128,input_shape=x.shape[1:],activation='relu'))

model.add(Dense(2,activation='softmax'))

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accurancy'])

model.fit(x,y,epochs=5,validation_split=0.1)



# model.fit(
#     x,
#     y,
#     batch_size=None,
#     epochs=5,
#     verbose="auto",
#     callbacks=None,
#     validation_split=0.1,
#     validation_data=None,
#     shuffle=True,
#     class_weight=None,
#     sample_weight=None,
#     initial_epoch=0,
#     steps_per_epoch=None,
#     validation_steps=None,
#     validation_batch_size=None,
#     validation_freq=1,
#     max_queue_size=10,
#     workers=1,
#     use_multiprocessing=False
# )